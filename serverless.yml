# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: edocs-documents-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: ${opt:stage}
  profile: hackney
  timeout: 15
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  vpc:
    securityGroupIds:
      - sg-022acccbebd7bca46
    subnetIds:
      - subnet-00356e0650138f74f
      - subnet-0a7f442c22a6feedc

plugins:
  - serverless-offline
  - serverless-offline-ssm

functions:
  edocs-documents-api:
    name: edocs-documents-api-${self:provider.stage}
    role: arn:aws:iam::775052747630:role/LBH_Lambda_Execution
    handler: api/index.handler
    package:
      exclude:
        - '**'
      include:
        - api/index.js
        - api/lib/**
        - api/node_modules/**
    events:
      - http:
          path: 'uhw/{proxy+}'
          method: ANY
          authorizer: ${self:custom.authorizer.w2-document-api-authorizer}
          cors:
            origins:
              - '*'
    environment:
      URL_PREFIX: 'uhw'
      S3_BUCKET_NAME: ${ssm:/uhw-document-api/production/S3_BUCKET_NAME}
      W2_DB_URL: ${ssm:/uhw-document-api/production/W2_DB_URL}
      W2_IMAGE_SERVER_URL: ${ssm:/uhw-document-api/production/W2_IMAGE_SERVER_URL}
      ENV: ${self:provider.stage}
      SENTRY_DSN: ${ssm:/uhw-document-api/SENTRY_DSN}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

  hncomino-document-api:
    name: hncomino-document-api-${self:provider.stage}
    role: arn:aws:iam::775052747630:role/LBH_Lambda_Execution
    handler: api/index.handler
    package:
      exclude:
        - '**'
      include:
        - api/index.js
        - api/lib/**
        - api/node_modules/**
    events:
      - http:
          path: 'hncomino/{proxy+}'
          method: ANY
          authorizer: ${self:custom.authorizer.w2-document-api-authorizer}
          cors:
            origins:
              - '*'
    environment:
      URL_PREFIX: 'hncomino'
      S3_BUCKET_NAME: ${ssm:/hncomino-document-api/production/S3_BUCKET_NAME}
      W2_DB_URL: ${ssm:/hncomino-document-api/production/W2_DB_URL}
      W2_IMAGE_SERVER_URL: ${ssm:/hncomino-document-api/production/W2_IMAGE_SERVER_URL}
      ENV: ${self:provider.stage}
      SENTRY_DSN: ${ssm:/hncomino-document-api/SENTRY_DSN}

  w2-document-api-authorizer:
    name: w2-document-api-authorizer-${self:provider.stage}
    role: arn:aws:iam::775052747630:role/LBH_Lambda_Execution
    handler: authorizer/index.handler
    package:
      exclude:
        - '**'
      include:
        - authorizer/index.js
        - authorizer/node_modules/**
    environment:
      jwtsecret: ${ssm:/common/hackney-jwt-secret}
      allowedGroups: 'housingneeds-singleview-beta'
      ENV: ${self:provider.stage}
      SENTRY_DSN: ${ssm:/uhw-document-api/SENTRY_DSN}

custom:
  stage: ${self:provider.stage}
  authorizer:
    w2-document-api-authorizer:
      name: w2-document-api-authorizer
      type: request
      resultTtlInSeconds: 0
