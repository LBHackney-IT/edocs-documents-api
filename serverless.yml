service: edocs-documents-api

provider:
  environment:
    ACCESS_LOGS_TABLE: ${self:service}-${self:provider.stage}-access-logs
    STAGE: ${self:provider.stage}
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: ${opt:stage, 'dev'}
  timeout: 15
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  vpc:
    securityGroupIds:
      - sg-022acccbebd7bca46
    subnetIds:
      - subnet-00356e0650138f74f
      - subnet-0a7f442c22a6feedc

plugins:
  - serverless-offline-ssm
  - serverless-offline
  - serverless-dynamodb-local

functions:
  getDoc:
    name: edocs-documents-api-${self:provider.stage}-getDoc
    role: arn:aws:iam::775052747630:role/LBH_Lambda_Execution
    handler: api/index.handler
    memorySize: 3008
    package:
      exclude:
        - '**'
        - node_modules/aws-sdk/**
      include:
        - api/index.js
        - api/lib/**
        - node_modules/**
    events:
      - http:
          path: /documents/{documentId}
          method: GET
          authorizer: ${self:custom.authorizer.edocs-documents-api-authorizer}
      - http:
          path: /LbhMosaicEDocs/DocumentMenu.aspx
          method: GET

    environment:
      stage: ${self:provider.stage}
      EDOCS_API_KEY: ${ssm:/edocs-api/${self:provider.stage}/edocs-api-key~true}
      EDOCS_API_URL: ${ssm:/edocs-api/${self:provider.stage}/edocs-api-url}
      S3_BUCKET_NAME: edocs-documents-${self:provider.stage}
      jwtsecret: ${ssm:/common/hackney-jwt-secret}
      allowedGroups: ${ssm:/edocs-api/${self:provider.stage}/allowedGroups}
      redirectUri: ${ssm:/edocs-api/${self:provider.stage}/redirectUri}
      googleAuthRedirectUri: ${ssm:/common/google-auth-redirect-uri}
  
  edocs-documents-api-authorizer:
    name: edocs-documents-api-authorizer-${self:provider.stage}
    role: arn:aws:iam::775052747630:role/LBH_Lambda_Execution
    handler: api/authorizer.handler
    environment:
      jwtsecret: ${ssm:/common/hackney-jwt-secret}
      allowedGroups: ${ssm:/edocs-api/${self:provider.stage}/allowedGroups}

resources:
    Resources:
        BucketCache:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: edocs-documents-${self:provider.stage}
                AccessControl: Private
                PublicAccessBlockConfiguration:
                  BlockPublicAcls : true
                  BlockPublicPolicy : true
                  IgnorePublicAcls : true
                  RestrictPublicBuckets : true
        ValuesDynamoDbTable:
          Type: 'AWS::DynamoDB::Table'
          DeletionPolicy: Retain
          Properties:
            AttributeDefinitions:
              -
                AttributeName: documentId
                AttributeType: S
              -
                AttributeName: accessTime
                AttributeType: S
            KeySchema:
              -
                AttributeName: documentId
                KeyType: HASH
              - AttributeName: accessTime
                KeyType: RANGE
            BillingMode: PROVISIONED
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
            TableName: ${self:provider.environment.ACCESS_LOGS_TABLE}

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  stage: ${self:provider.stage}
  authorizer:
    edocs-documents-api-authorizer:
      name: edocs-documents-api-authorizer
      type: request
      resultTtlInSeconds: 0
      identitySource: ''
